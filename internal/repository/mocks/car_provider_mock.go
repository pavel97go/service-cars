// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/pavel97go/service-cars/internal/models"
)

// MockCarProvider is a mock of CarProvider interface.
type MockCarProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCarProviderMockRecorder
}

// MockCarProviderMockRecorder is the mock recorder for MockCarProvider.
type MockCarProviderMockRecorder struct {
	mock *MockCarProvider
}

// NewMockCarProvider creates a new mock instance.
func NewMockCarProvider(ctrl *gomock.Controller) *MockCarProvider {
	mock := &MockCarProvider{ctrl: ctrl}
	mock.recorder = &MockCarProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarProvider) EXPECT() *MockCarProviderMockRecorder {
	return m.recorder
}

// DeleteByID mocks base method.
func (m *MockCarProvider) DeleteByID(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockCarProviderMockRecorder) DeleteByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockCarProvider)(nil).DeleteByID), ctx, id)
}

// GetCarByID mocks base method.
func (m *MockCarProvider) GetCarByID(ctx context.Context, id string) (*models.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarByID", ctx, id)
	ret0, _ := ret[0].(*models.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarByID indicates an expected call of GetCarByID.
func (mr *MockCarProviderMockRecorder) GetCarByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarByID", reflect.TypeOf((*MockCarProvider)(nil).GetCarByID), ctx, id)
}

// InsertCar mocks base method.
func (m *MockCarProvider) InsertCar(ctx context.Context, newCar *models.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertCar", ctx, newCar)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertCar indicates an expected call of InsertCar.
func (mr *MockCarProviderMockRecorder) InsertCar(ctx, newCar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertCar", reflect.TypeOf((*MockCarProvider)(nil).InsertCar), ctx, newCar)
}

// ListCars mocks base method.
func (m *MockCarProvider) ListCars(ctx context.Context) ([]models.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCars", ctx)
	ret0, _ := ret[0].([]models.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCars indicates an expected call of ListCars.
func (mr *MockCarProviderMockRecorder) ListCars(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCars", reflect.TypeOf((*MockCarProvider)(nil).ListCars), ctx)
}

// UpdateCar mocks base method.
func (m *MockCarProvider) UpdateCar(ctx context.Context, updatedCar *models.Car) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCar", ctx, updatedCar)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCar indicates an expected call of UpdateCar.
func (mr *MockCarProviderMockRecorder) UpdateCar(ctx, updatedCar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCar", reflect.TypeOf((*MockCarProvider)(nil).UpdateCar), ctx, updatedCar)
}
